#2015 January 15
#shannon Gallagher, Beka Steorts, Lee Richardson
#Configuration File
#User and Country configs


#FUNCTION:  call the User parameters
#ATTN: Lee and Beka, you need to set your own output folders!  Please do not upload outputs to Bitbucket!
#INPUTS:  user (char)
#OUTPUTS:  userParams (list); only outputFolders right now
#REQUIREMENTS:  NONE

callUserParams<- function(user, country){
    switch(user,
	v2_user = {
		if(file.exists(paste0("/data/shared_group_data/syneco/outputs/", country,"/"))){unlink(paste0("/data/shared_group_data/syneco/outputs/", country, "/"), recursive=T)
		dir.create(paste0("/data/shared_group_data/syneco/outputs/", country, "/"))
		outputFolder<- paste0("/data/shared_group_data/syneco/outputs", country, "/"))
		} else {
		       dir.create(paste0("/data/shared_group_data/syneco/outputs", country, "/"))
		       outputFolder<- paste0("/data/shared_group_data/syneco/outputs", country, "/")
		       }
		codeFolder<- "functions/"
		},
           shannon = {  
                    if(file.exists(paste0("/media/shannon/TOSHIBA\ EXT/ebola_outputs/", country, "/"))){
                      unlink(paste0("/media/shannon/TOSHIBA\ EXT/ebola_outputs/", country, "/"), recursive=TRUE)
                      dir.create(paste0("/media/shannon/TOSHIBA\ EXT/ebola_outputs/", country, "/"))
                      outputFolder<- paste0("/media/shannon/TOSHIBA\ EXT/ebola_outputs/", country, "/")
                    } else {
                        dir.create(paste0("/media/shannon/TOSHIBA\ EXT/ebola_outputs/", country, "/"))
                        outputFolder<- paste0("/media/shannon/TOSHIBA\ EXT/ebola_outputs/", country, "/")                      
                    } 
                      codeFolder<- "functions/"    
            },
           shannon2 = {outputFolder<- "~/Desktop/ebola_outputs/"
                       codeFolder<- "functions/"
                  },
           beka ={ outputFolder<- "plzchangeme/"
                   codeFolder<- "functions/"
              },
           lee = {
                    if(file.exists(paste0("C:/Users/Lee/synth_outputs/", country, "/"))){
                      unlink(paste0("C:/Users/Lee/synth_outputs/", country, "/"), recursive=TRUE)
                      dir.create(paste0("C:/Users/Lee/synth_outputs/", country, "/"))
                      outputFolder<- paste0("C:/Users/Lee/synth_outputs/", country, "/")
                    } else {
                        dir.create(paste0("C:/Users/Lee/synth_outputs/", country, "/"))
                        outputFolder<- paste0("C:/Users/Lee/synth_outputs/", country, "/")                      
                    } 
                    
                  codeFolder<- "functions/"
              },
           lee2 = {                    
                     if(file.exists(paste0("C:/Users/leeri_000/synth_outputs/", country, "/"))){
                       unlink(paste0("C:/Users/leeri_000/synth_outputs/", country, "/"), recursive=TRUE)
                       dir.create(paste0("C:/Users/leeri_000/synth_outputs/", country, "/"))
                       outputFolder<- paste0("C:/Users/leeri_000/synth_outputs/", country, "/")
                     } else {
                         dir.create(paste0("C:/Users/leeri_000/synth_outputs/", country, "/"))
                         outputFolder<- paste0("C:/Users/leeri_000/synth_outputs/", country, "/")                      
                    } 
           
                    codeFolder<- "functions/"
           },
           stop("Enter a valid user.")
           )
    userParams<- list(outputFolder=outputFolder, codeFolder=codeFolder)
    return(userParams)
}
## #TESTING
## user<- "shannon2"
## test<- callUserParams(user)
## test


#FUNCTION:  call country parameters which include
# year (4 digit int), geographyFileName (name of shapefile to use), shapeFileType (what source is shapefile from), PUMScountry (what's the surrogate pums), PUMS (char vec names of geolev0, geolevel1, etc.), hasPUMS (logical, does this country have PUMS from IPUMS,  addExtraVars (logical), numDecLatLong (int), varsToKeepP (char vec), varsToKeepH (char vec), shapefile (char vec names of geolev0, geolevel1, etc.), hhAve (real number)
#INPUTS:  countryName (char), year (currently useless), geoLevel (int), version (char "vX")
#OUTPUTS:  countryParams (list) details above
#REQUIREMENTS:  NONE
callCountryParams<- function(countryName, year, geoLevel, version, isUSA=FALSE, geoID=NA){
    PUMS.h<-"NULL"; PUMS.p<-"NULL"; PUMS<- "NULL"   ; hhAve<- "NULL";geohiveLevel = "NULL"; countsGeoNames<- "NULL";
    #for USA, call new function to get those parameters
    if (isUSA){
       countryParams<- getUSAParams(year, geoLevel, version, isUSA, geoID, geoIDType)
       return(countryParams)
    }

    #####FOR WESTERN AFRICA
    #sierraLeone, gl 1, v2
    hhAve<- "NULL"
    geohiveLevel = "NULL"
    countsGeoNames<- "NULL"
    if (countryName=="sierraleone" & geoLevel==1 & version=="v2"){
        countryCode<-"SL"
        countryNum<- 694
        year<- 2000
        geographyFileName<- "world_geolev1.shp"
        shapeFileType<- "world"
        PUMScountry<-  "ipumsi_00001_694.RData"
        hasPUMS<- TRUE
        addExtraVars<- FALSE
        shapefile<- c("CNTRY_NAME", "GEOLEVEL1")
        PUMS<- c("CNTRY_NAME", "GEOLEV1")
        table<- "PUMS"
        
    }
    #liberia gl 1, v2
    else if (countryName == "liberia" & geoLevel==1 & version=="v2"){
        countryCode<-"LR"
        year<- 2000
        geographyFileName<- "world_geolev1.shp"
        shapeFileType<- "world"
        PUMScountry<-  "ipumsi_00001_430.RData"
        hasPUMS<- TRUE
        addExtraVars<- FALSE
        shapefile<- c("CNTRY_NAME", "GEOLEVEL1")
        PUMS<- c("CNTRY_NAME", "GEOLEV1")
        table<- "PUMS"
    }
    #guinea, gl 1, v2
    else if (countryName == "guinea" & geoLevel==1 & version=="v2"){
        countryCode<-"GN"
        year<- 2000
        geographyFileName<- "world_geolev1.shp"
        shapeFileType<- "world"
        PUMScountry<-  "ipumsi_00001_324.RData"
        hasPUMS<- TRUE
        addExtraVars<- FALSE
        shapefile<- c("CNTRY_NAME", "GEOLEVEL1")
        PUMS<- c("CNTRY_NAME", "GEOLEV1")
        table<- "PUMS"
    }
    #senegal, gl1, v2
    else if (countryName == "senegal" & geoLevel==1 & version=="v2"){
        countryCode<-"SN"
        year<- 2000
        geographyFileName<- "world_geolev1.shp"
        shapeFileType<- "world"
        PUMScountry<-  "ipumsi_00001_686.RData"
        hasPUMS<- TRUE
        addExtraVars<- FALSE
        shapefile<- c("CNTRY_NAME", "GEOLEVEL1")
        PUMS<- c("CNTRY_NAME", "GEOLEV1")
        table<- "PUMS"
    }
    #nigeria, gl 1, v2, currently non functional, needs a popTable
    else if (countryName == "nigeria" & geoLevel==1 & version=="v2"){
        countryCode<-"NG"
        year<- 2000
        geographyFileName<- "world_geolev1.shp"
        shapeFileType<- "world"
        PUMScountry<-  "ipumsi_00001_430.RData" #liberia
        hasPUMS<- FALSE
        addExtraVars<- FALSE
        shapefile<- c("CNTRY_NAME", "GEOLEVEL1")
        PUMS<- c("CNTRY_NAME", "GEOLEV1")
        table<- "pretab"
    }
    #mali, gl1, v2, non functional as mali has holes
    else if (countryName == "mali" & geoLevel==1 & version=="v2"){
        countryCode<-"ML"
        year<- 2000
        geographyFileName<- "world_geolev1.shp"
        shapeFileType<- "world"
        PUMScountry<-  "ipumsi_mali.RData"
        hasPUMS<- TRUE
        addExtraVars<- FALSE
        shapefile<- c("CNTRY_NAME", "GEOLEVEL1")
        PUMS<- c("CNTRY_NAME", "GEOLEV1")
        table<- "PUMS"
    }
    ########
    #countries without PUMS
    #cote d'ivoire, gl 1, v2
    else if (countryName == "cotedivoire" & geoLevel==1 & version=="v2"){
        countryCode<-"CI"
        year<- 1998
        geographyFileName<- "cotedivoire/cotedivoire.shp"
        shapeFileType<- "mapMakerUK"
        PUMScountry<- "ipumsi_00001_430.RData" #Liberia
        hasPUMS<- FALSE
        addExtraVars<- FALSE
        shapefile<- c("geoLevel0", "ID")
        PUMS<- c("CNTRY_NAME", "GEOLEV1")
        hhAve<- 5.1
        table<- "pretab"
    }
    else if (countryName == "guineabissau" & geoLevel==1 & version=="v2"){
        countryCode<-"GW"
        year<- 2009
        geographyFileName<- "guineabissau/guineabissau.shp"
        shapeFileType<- "mapMakerUK"
        PUMScountry<- "ipumsi_00001_694.RData"  #Sierra leone
        hasPUMS<- FALSE
        addExtraVars<- FALSE
        shapefile<- c("geoLevel0", "ID")
        PUMS<- c("CNTRY_NAME", "GEOLEV1")
        hhAve<- 7.6
        table<- "pretab"
    }
    else if (countryName == "thegambia" & geoLevel==1 & version=="v2"){
        countryCode<-"GM"
        year<- 2003
        geographyFileName<- "thegambia/thegambia.shp"
        shapeFileType<- "mapMakerUK"
        PUMScountry<- "ipumsi_00001_694.RData"  #Sierra leone
        hasPUMS<- FALSE
        addExtraVars<- FALSE
        shapefile<- c("geoLevel0", "ID")
        PUMS<- c("CNTRY_NAME", "GEOLEV1")
        hhAve<- 8.2        #http://www.gbos.gov.gm/uploads/census/The%20Gambia%20Population%20and%20Housing%20Census%202013%20Provisional%20Report.pdf
        table<- "pretab"
    }
    #######second level geography
    else if (countryName == "sierraleone" & geoLevel==2 & version=="v2"){
        countryCode<-"SL"
        countryNum<- 694
        year<- 2004
        #change this one
        geographyFileName<- "sierraleone/SLE_adm3.shp"
        #change this 
        shapeFileType<- "gadm"
        PUMScountry<-  "ipumsi_00001_694.RData"#sierra leone
        hasPUMS<- FALSE
        addExtraVars<- FALSE
        shapefile<- c("NAME_0", "NAME_2", "NAME_3")
        PUMS<- c("CNTRY_NAME", "GEOLEV1")
        table<- "geohive"
        geohiveLevel <- "level4"
        hhAve<- 10 #source:   #http://home.wfp.org/stellent/groups/public/documents/ena/wfp216299.pdf
        countsGeoNames<- c(NA, NA, "ProvinceDistrict")

    }
    else if ( countryName== "liberia" & geoLevel==2 & version=="v2"){
       # stop("We dont' have second level counts for Liberia!")
        countryCode<-"LR"
        countryNum<- 430
        year<- 2008
        geographyFileName<- "liberia/LBR_adm2.shp"
        shapeFileType<- "gadm"
        PUMScountry<-  "ipumsi_00001_430.RData"
        hasPUMS<- FALSE
        addExtraVars<- FALSE
        shapefile<- c("NAME_0", "NAME_1", "NAME_2")
        PUMS<- c("CNTRY_NAME", "GEOLEV1")
        table<- "geohive"
        geohiveLevel <- "level4"
        hhAve<- 5.1 #source : http://www.aho.afro.who.int/profiles_information/index.php/Liberia:Analytical_summary_-_Social_determinants
        countsGeoNames<- c(NA, NA, "countydistrict")
    }
    else if (countryName == "guinea" & geoLevel==2 & version=="v2"){
        #stop("We are in the process of scraping Guinea's geohive data")
        countryCode<-"GN"
        countryNum<- 324
        year<- 2014
        geographyFileName<- "guinea/GIN_adm2.shp"
        shapeFileType<- "gadm"
        PUMScountry<-  "ipumsi_00001_324.RData"
        hasPUMS<- FALSE
        addExtraVars<- FALSE
        shapefile<- c("NAME_0", "NAME_1", "NAME_2")
        PUMS<- c("CNTRY_NAME", "GEOLEV1")
        table<- "geohive"
        geohiveLevel = "level2"
        hhAve<- 8 #http://www.encyclopedia.com/topic/Equatorial_Guinea.aspx
        countsGeoNames<- c(NA, NA, "regionprefecture")
    }
    else if (countryName == "senegal" & geoLevel==2 & version=="v2"){
      # stop("We need to first get rid of special characters in the shapefile!")
        countryCode<-"SN"
        countryNum<- 686
        year<- 2013
        geographyFileName<- "senegal/SEN_adm2.shp"
        shapeFileType<- "gadm"
        PUMScountry<-  "ipumsi_00001_686.RData"
        hasPUMS<- FALSE
        addExtraVars<- FALSE
        shapefile<- c("NAME_0", "NAME_1", "NAME_2")
        PUMS<- c("CNTRY_NAME", "GEOLEV1")
        table<- "geohive"
        geohiveLevel <- "level2"
        hhAve<- 8.4 #http://www.worldbank.org/transport/transportresults/regions/africa/senegal-output-eng.pdf
        countsGeoNames<- c(NA, NA, "regiondepartmentarrondissementcommune")
    }
    else if (countryName == "mali" & geoLevel==2 & version=="v2"){
        #stop("Mali needs special attention to its varsToKeep.p")
        countryCode<-"ML"
        year<- 2009
        geographyFileName<- "mali/MLI_adm2.shp"
        shapeFileType<- "gadm"
        PUMScountry<-  "ipumsi_mali.RData"
        hasPUMS<- FALSE
        addExtraVars<- FALSE
        shapefile<- c("NAME_0","NAME_1", "NAME_2")
        PUMS<- c("CNTRY_NAME", "GEOLEV1")
        table<- "geohive"
        geohiveLevel <- "level2"
        countsGeoNames<- c(NA, NA, "regioncercle")
        hhAve<- 5.3 #http://dhsprogram.com/pubs/pdf/SR95/Ml01KeyFindings.pdf
    }
    else if (countryName == "cotedivoire" & geoLevel==2 & version=="v2"){
       # stop("Cote d'Ivoire needs foreign characters removed from its shapefiles.")
        countryCode<-"CI"
        year<- 1998
        geographyFileName<- "cotedivoire/CIV_adm2.shp"
        shapeFileType<- "gadm"
        PUMScountry<- "ipumsi_00001_430.RData" #Liberia
        hasPUMS<- FALSE
        addExtraVars<- FALSE
        shapefile<- c("NAME_0","NAME_1", "NAME_2")
        PUMS<- c("CNTRY_NAME", "GEOLEV1")
        hhAve<- 5.1
        table<- "geohive"
        geohiveLevel <- "NULL"
        countsGeoNames<- c(NA, NA, "regiondepartement")
    }
    else if (countryName == "guineabissau" & geoLevel==2 & version=="v2"){
     #   stop("Guinea-Bissau  needs foreign characters removed from its shapefiles.")
        countryCode<-"GW"
        year<- 2009
        geographyFileName<- "guineabissau/GNB_adm2.shp"
        shapeFileType<- "gadm"
        PUMScountry<- "ipumsi_00001_694.RData"  #Sierra leone
        hasPUMS<- FALSE
        addExtraVars<- FALSE
        shapefile<- c("NAME_0", "NAME_1", "NAME_2")
        PUMS<- c("CNTRY_NAME", "GEOLEV1")
        hhAve<- 7.6
        table<- "geohive"
        geohiveLevel <- "level2"
        countsGeoNames<- c(NA, NA, "regiaosector")        
    }
    else if (countryName == "thegambia" & geoLevel==2 & version=="v2"){
        countryCode<-"GM"
        year<- 2003
        geographyFileName<- "thegambia/GMB_adm2.shp"
        shapeFileType<- "gadm"
        PUMScountry<- "ipumsi_00001_694.RData"  #Sierra leone
        hasPUMS<- FALSE
        addExtraVars<- FALSE
        shapefile<- c("NAME_0", "NAME_1", "NAME_2")
        PUMS<- c("CNTRY_NAME", "GEOLEV1")
        hhAve<- 8.2 #http://www.gbos.gov.gm/uploads/census/The%20Gambia%20Population%20and%20Housing%20Census%202013%20Provisional%20Report.pdf
        table<- "geohive"
        geohiveLevel = "level2"
        countsGeoNames<- c(NA, NA, "LGAdistrict") 
    }
    else{
        stop("Choose a valid combination of country, geoLevel, and version.")
    }
    #other vars
    numDecLatLong = 8

    if(countryName != "mali"){
    
        varsToKeepH <- c("CNTRY", "YEAR", "SERIAL", "PERSONS","GQ", "URBAN", "HHTYPE", "SERIAL")
        varsToKeepP<-c("CNTRY", "YEAR", "SERIAL", "PERNUM", "WTPER",  "AGE", "SEX", "MARST", "SCHOOL", "EMPSTAT", "OCCISCO", "DISABLE", "SERIAL")
        seed<-19
    }
    else{
	 varsToKeepH <-c("CNTRY", "YEAR", "SERIAL", "PERSONS",
      "GQ", "URBAN", "HHTYPE")
	 varsToKeepP <-c("CNTRY", "YEAR", "SERIAL", "PERNUM", "WTPER",
      "AGE", "SEX", "MARST")
         seed<-19

    }
    countryParams<- list(countryCode=countryCode, year = year, geographyFileName=geographyFileName, 
                         shapeFileType=shapeFileType, PUMScountry=PUMScountry, hasPUMS=hasPUMS, 
                         addExtraVars=addExtraVars, shapefile=shapefile, PUMS=PUMS, hhAve=hhAve, 
                         table=table, numDecLatLong= numDecLatLong, varsToKeepH= varsToKeepH, 
                         varsToKeepP= varsToKeepP, seed=seed, countsGeoNames=countsGeoNames, 
                         geohiveLevel = geohiveLevel, PUMS.h=PUMS.h, PUMS.p=PUMS.p)
    return(countryParams)   
}


###########################################################3
#####################USA####################################
##############################################################



#FUNCTION:  get parameters if we are dealing with USA
#INPUTS:
#OUTPUTS:
#REQUIREMETNS:

getUSAParams<- function(year, geoLevel, version, isUSA, geoID, geoIDType="FIPS"){
    PUMS.h<-"NULL"; PUMS.p<-"NULL"; PUMS<- "NULL"  ; hhAve<- "NULL";geohiveLevel = "NULL"; countsGeoNames<- "NULL"; dataFolder<- paste0("/data/shared_group_data/syneco/input/west/north_america/united_states/", geoId, "/")
    #stop("The getUSA function is under construction!")
    #use the 00 look up table to find which pums (p and h) and TIGER files to load, generally looking for the state
    
    hhAve<- "NULL"
    geohiveLevel = "NULL"
    countsGeoNames<- "NULL"
    #print(geoID)
    if (as.character(geoID) == "42003" & geoLevel==2 & version=="v3"){
        countryCode<-"PA"
        countryNum<- 42
        year<- 2010
        geographyFileName<- "tiger/tl_2010_42003_tract00.shp"
        shapeFileType<- "usa2010"
        PUMScountry<-  "NULL"
        hasPUMS<- TRUE
        addExtraVars<- TRUE
        shapefile<- c("STATEFP00", "COUNTYFP00", "TRACTFP00")
        PUMS<- c("ST", "PUMA")
        PUMS.p<- "pums/ss10ppa.csv"
        PUMS.h<- "pums/ss10hpa.csv"
        table<- "USPUMS"
        
    }
    else if (as.character(geoID)=="42" & geoLevel==2 & version=="v3"){
        countryCode<- "PA"
        countryNum<- 42
        year<- 2010
        geographyFileName<- "tiger/2010_pa/tl_2010_42_tract10.shp"
        shapeFileType<- "usa2010"
        PUMScountry<- "NULL"
        hasPUMS<- TRUE
        addExtraVars<- TRUE
        shapefile<-c("STATEFP10", "COUNTYFP10", "TRACTFP10")
        PUMS<- c("ST", "PUMA")
        PUMS.p<- "pums/ss10ppa.csv"
        PUMS.h<- "pums/ss10hpa.csv"
        table<- "USPUMS"
    }
    else if (as.character(geoID)=="06" & geoLevel==2 & version=="v3"){
        countryCode<- "CA"
        countryNum<- 03
        year<- 2010
        geographyFileName<- "tiger/2010_ca/tl_2010_06_tract10.shp"
        shapeFileType<- "usa2010"
        PUMScountry<- "NULL"
        hasPUMS<- TRUE
        addExtraVars<- TRUE
        shapefile<-c("STATEFP10", "COUNTYFP10", "TRACTFP10")
        PUMS<- c("ST", "PUMA")
        PUMS.p<- "pums/ss10pca.csv"
        PUMS.h<- "pums/ss10hca.csv"
        table<- "USPUMS"
    }
    else{
        stop("Choose a valid combination of country, geoLevel, and version.")
    }
    #other vars
    numDecLatLong = 8
    varsToKeepH <-c("SERIAL") #FIX #, "PUMA", "ST", "NP", "HHINCP")#
	 varsToKeepP <-c("SERIAL", "AGEP", "COW", "RELP", "SCH", "SCHG", "SCHL", "SEX", "HISP", "POWPUMA", "RAC1P" )
         seed<-19

    countryParams<- list(countryCode=countryCode, year = year, geographyFileName=geographyFileName, 
                         shapeFileType=shapeFileType, PUMScountry=PUMScountry, hasPUMS=hasPUMS, 
                         addExtraVars=addExtraVars, shapefile=shapefile, PUMS=PUMS, hhAve=hhAve, 
                         table=table, numDecLatLong= numDecLatLong, varsToKeepH= varsToKeepH, 
                         varsToKeepP= varsToKeepP, seed=seed, countsGeoNames=countsGeoNames, 
                         geohiveLevel = geohiveLevel, PUMS.h=PUMS.h, PUMS.p=PUMS.p, dataFolder=dataFolder)
    return(countryParams)
}

